# -- encoding: utf-8 --
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.feature_extraction import DictVectorizer

import jieba


def dict_vec():
    """

    :return: None
    """
    dicts = [{'city': '北京', 'temperature': 100,
              'city': '上海', 'temperature': 60,
              'city': '成都', 'temperature': 30}]

    # dict_ins = DictVectorizer(sparse=False)
    dict_ins = DictVectorizer(sparse=True)
    data = dict_ins.fit_transform(dicts)
    print(dict_ins.get_feature_names())
    print(data)
    print(dict_ins.inverse_transform(data))

    return None


def count_vec():
    """

    :return: None
    """
    vector = CountVectorizer()
    res = vector.fit_transform(["life is short, i like python", "life is too long, i dislike python"])
    res = vector.fit_transform(["人生 苦短, 我用python", "人生 漫漫, 我也用python"])
    print(vector.get_feature_names())
    print(res.toarray())
    return None


def cut_words(text):
    """
    中文截词， 返回经过截词的字符串
    :param text:
    :return:
    """
    res = jieba.cut(text)
    res = ",".join(list(res))
    return res


def get_text_data():
    """
    返回三篇文字的内容
    :return: text1, text2, text3
    """
    text1 = """
        熵是用来描述一个系统的混乱程度。最早出现的热力学中(能量守恒，热传导等)，目前拓展在了很多领域，比如信息技术领域中用熵来描述信息的价值。

    所以熵就是用来描述运动本身，我这里从运动的两个方面来分别说明:

    熵增:熵增就是说系统变的越来越混乱。关于熵增有一个很著名的定理就是:在没有外力的情况下，一切事物都是从有序向无序发展，最终形成熵死。热传导现象就是熵增的例子，热量是从高温传到低温，最终达到热平衡。一把硬币顺手抛出去全是同一面的概率很小。

    熵减:熵减是熵增的逆形势。说的是在外力的作用下系统变得越来越有序。大家都知道万有引力，也应该听过苹果从树上掉下来砸到牛顿头上的故事。不知大家有没有想过，如果地球上的万物由于引力的作用全部落下去，地球怎么就没缩小呢？江水涛涛拍山而去，江水怎么会永远不干涸呢？苹果今年从树上落下，明年怎么还会从树上落下呢？这是因为有熵减的存在(混乱向有序发展)。熵减就是生命的力量。

    熵减即有序，有序生生命。人只要一死，呼吸系统，神经系统，血液循环系统随机崩坏，肉体随即腐烂，最终尘归尘土归土。要想活的长久就应该洁身自好，爱护自己的身体就是敬畏自己的生命。生命的可贵之处在于逆向做功，既然是逆向做功自然就会有困难。为什么建房子困难而拆房子容易，因为建房子是为了创造有序。

    关于熵与生命的例子再说几句，人的欲望就是熵增，人的理性就是熵减。看爱情动作片轻松，看公开课困难。看修仙小说轻松，看这篇文章困难也是这个道理。

    常言道，生命在于运动。更确切的说法应该是生命在于有序(理性)的运动。

    【关于熵的概念】https://www.zhihu.com/question/24053383

    活而为思，思而践行。淡之由思考万有引力想到的
    """

    text2 = """
        你有没有碰到这样的情况

    "我一买股票它就下跌，卖出之后它反而上涨，难道股市总与我作对？"

    典型的散户心理，炒股还是要有专业知识的，不在股市里摸爬滚打个几年就不能说你是股民，这也就是为什么很多散户都有过类似的感慨—为什么我不卖它不涨，我刚一卖它就狂涨，难道主力就差我这几百上千股不成? 其实不是因为主力就差你这几股，而是你想到卖的时候其他人往往也在卖，在拉升之前，主力差的其实是多数人手中的那部分股票，很不幸，你恰好充当了多数人中的一员而已。

    从表面上看，股市似乎总是与我们作对。一支股票明明看好是漂亮的上升通道，然而刚刚建仓就跌下来了。上涨的股票总是躲来躲去，就是不能让我们赶上享受坐轿乐趣，而看到股票上涨无望，在愤恨中将其尽数抛出后，它却走上了真正的上升通道，难道股市专门与我们小股民作对不成？有些人只怪自己运气不佳，命苦，点儿背？

    如果有人经常遇到这种事情，说明暴露了以下2个问题：

    心态，你只留意操作之后反向的那些，忽略了操作之后“正确”的那些。所以错觉上每次都是一买就跌一卖就涨。

    你说了，你买入后就下跌，卖出就上涨，一般的散户思维是这样的，他们会去寻找一个一直处于低位，或者正在下跌的股票买入，因为他们觉得这支股票既然已经很低了，应该很安全，而一般散户卖出的逻辑是，这支股票开始上涨，或者他开始赚钱了，因为他害怕利润的失去，也觉得股票上涨一段时间都要下跌。

    混迹金融市场多年，每年看着进来的新人无数，淘汰的也无数，一直想给普通的投资者写点东西，聊聊这些年自己从无数次失败和成功中得到的一个感悟。很多时候，往往入门时的一些基本观念，其实决定了一个投机者最后能走到的高度。

    据说现在A股每周开户的人有30万之多，我很好奇能盈利的占了多少，过多几年还能存活下来的又有多少？

    自人类有股票市场以来，这个市场的不解之谜就是：为什么做交易95%的人会被市场打败出局？

    12道关于中国股市的简单数学题，看不懂就先别炒股了

    1.关于收益率

    假如你有100万，收益100%后资产达到200万，如果接下来亏损50%，则资产回到100万，显然亏损50%比赚取100%要容易得多；

    2.关于涨跌停

    假如你有100万，第一天涨停板后资产达到110万，然后第二天跌停，则资产剩余99万；反之第一天跌停，第二天涨停，资产还是99万元；

    3.关于波动性

    假如你有100万，第一年赚40%，第二年亏20%，第三年赚40%，第四年亏20%，第五年赚40%，第六年亏20%，资产剩余140.5万元，六年年化收益率仅为5.83%，甚至低于五年期凭证式国债票面利率；

    4.关于每天1%

    假如你有100万，每天不需要涨停板，只需要挣1%就离场，那么以每年250个交易日计算，一年下来你的资产可以达到1203.2万，两年后你就可以坐拥1.45亿。

    5.关于每年200%

    假如你有100万，连续5年每年200%收益率，那么5年后你也可以拥有2.43亿元个人资产，显然这样高额收益是很难持续的；

    6.关于10年10倍

    假如你有100万，希望十年后达到1000万，二十年达到1亿元，三十年达到10亿元，那么你需要做到年化收益率25.89%。

    7.关于补仓

    如果你在某只股票10元的时候买入1万元，如今跌到5元再买1万元，持有成本可以降到6.67元，而不是你想象中的7.50元；

    8.关于持有成本

    如果你有100万元，投资某股票盈利10%，当你做卖出决定的时候可以试着留下10万元市值的股票，那么你的持有成本将降为零，接下来你就可以毫无压力的长期持有了。如果你极度看好公司的发展，也可以留下20万市值的股票，你会发现你的盈利从10%提升到了100%，不要得意因为此时股票如果下跌超过了50%，你还是有可能亏损；

    9.关于资产组合

    有无风险资产A（每年5%）和风险资产B（每年-20%至40%），如果你有100万，你可以投资80万无风险资产A和20万风险资产B，那么你全年最差的收益可能就是零，而最佳收益可能是12%，这就是应用于保本基金CPPI技术的雏形；

    10.关于赌场赢利

    分析了澳门赌客1000个数据，发现胜负的概率为53%与47%，其中赢钱离场的人平均赢利34%，而输钱离场的人平均亏损时72%，赌场并不需要做局赢利，保证公平依靠人性的弱点就可以持续赢利。股市亦如此。

    11.关于投资成功的概率

    如果你投资成功的概率是60%，那么意味着你连续投资100次，其中60次盈利，40次亏损。如果你把止盈和止损都设置为10%和-10%，那么意味着最终的收益率是350%（1.1^60*0.9^40=4.50）

    解读：是的，朋友们，已经亮瞎你的眼了吧，3.5倍的收益率！而接下来你需要思考的是你怎么能保证你的胜率是60%呐，不要想当然，这个成功率对于多数人来说也是几乎不可能达到的。

    12.关于止盈止损

    索罗斯说过他不在乎胜负的概率，而期望盈利的时候比亏损时候能多赚一些。假设我们每次止盈是10%，每次止损是-5%，那么连续投资100次，假设胜负概率是50%，那么意味着你最终的收益率是803.26%（1.1^50*0.95^50=9.0326）

    解读：是的，你没有看错，收益率是800%。前提是你可以坚决的止损和止盈，其次你能保证50%的概率能到达更多的止盈机会吗？
    """

    text3 = """
        根据《纯粹理性批判》，数学是一种直观科学，是由基本概念和运算构成的一个知识体系。这个体系建立在寥寥数个普世的直观判断和严密的逻辑推理（运算）之上，具有普遍必然性和稳固性。

    既然数学这么简单，为什么一直以来我们没能学好数学，更不能把一些最简单的数学公式应用到自己的生活实践中去解决具体问题呢？今天就来尝试解答。

    为什么有些人觉得数学很难懂？
    根据数学的本质，学习数学应该很简单。毕竟构成数学体系的大前提人人都能理解。比如欧式几何中的五定律、微积分里的无穷小等概念。还有那些能够推导出千万公式的运算方法也只有为数不多的几种，同时运算的概念也是相当的直观，比如交并补、加乘除等。但为什么只有5%的人才能学好数学呢？我觉得应该有以下几个原因。

    一、没有真正认识到数学的价值。

    现代科学的发展离不开数学，这几乎已经成了共识。但不能因为这个判断就可以断言你真正的理会了数学的价值。真正的价值产生于自我利用。数学如果不能像金钱和美食一样勾起一个人的欲念，无论别人说的怎么样的天花乱坠，即使他能从数学导致的结果中产生间接性的认识，但他的内心仍然不会真正的理解数学之利。就像你给一个天生失明的人吹捧眼前的一朵牡丹花，他可能知道你说的是事实，但他永远都无法真正的理解牡丹之美。所以，学习数学的第一步就是“开天眼”，要让数学勾起你理性思维的欲念。

    二、概念的抽象性和杂多性。

    数学是一门符号科学，符号的抽象性以及由基本概念而推演出的杂多概念，让很大一部分人望而生畏，尤其是那些天生记忆力较差或想象力过于丰富的人。记忆力差导致数学的逻辑结构很难在他心里建立明晰的概念体系。想象力过于丰富导致数学概念在他思维中容易被其他概念混淆。记忆力和想象力主要受先天制约，但是也可以在后天实践中得到锻炼。

    三、数学思维的培养和应用难度更高。

    缺少数学思维，就很难形成理性认识。没有理性认识，就很难产生有价值的判断，不能做出有价值的判断自然也就无法领会数学的意义和引起对数学范畴的反思。

    为什么数学的应用更是难上加难？
    在实践中应用数学，主要是指利用数学工具对具体问题做出合理的判断。

    综合判断能力每个人都在时刻的应用，只是不同的人由于认识能力的差异导致其对具体问题做出的判断效果差异也很大。但人类的行为之少说明，每个人或多或少都在应用数学的思维方式，只是有些人没有意识到罢了。然而掌握数学工具能够使的先天综合判断能力较弱的人同样可以做出可靠的判断。但为什么即使有些数学知识很渊博的人在实践中也难以应用数学呢？

    这主要还是认识的问题。数学好的人，只能说明他理解和掌握了数学的概念和知识体系，但是面对具体问题，还需要有把实际问题抽象到数学模型的能力（建模的过程），没有对具体问题的合理抽象，数学知识和实际问题就完全是两个不同的东西。比如你的数理统计学的特别好，里面的任何一个公式，如条件概率公式和贝叶斯公式你都记得，并且能够解答很多关于统计的题目，但如果让你用所学的统计知识来提升一家螺丝钉制造公司的产品质量，或者对当前产品的合格率做出量化和预测，你就不一定能够处理的好了。因为这需要解决问题的人同时具备灵活的抽象能力和丰富的数学知识，而这种人往往是凤毛麟角。

    活而为思，思而践行 淡之读概率论所想
    """
    return text1, text2, text3


def count_vec2():
    """
    中文词频统计
    :return: None
    """
    text1, text2, text3 = get_text_data()
    vector = CountVectorizer()
    text1 = cut_words(text1)
    text2 = cut_words(text2)
    text3 = cut_words(text3)
    res = vector.fit_transform([text1, text2, text3])
    print(vector.get_feature_names())
    # print(vector.inverse_transform(res))
    print(res.toarray())
    return None


def tf_idf_vec():
    """
    词频统计
    :return: None
    """
    text1, text2, text3 = get_text_data()
    vector = TfidfVectorizer()
    text1 = cut_words(text1)
    text2 = cut_words(text2)
    text3 = cut_words(text3)
    res = vector.fit_transform([text1, text2, text3])
    print(vector.get_feature_names())
    # print(vector.inverse_transform(res))
    print(res.toarray())
    return None


if __name__ == "__main__":
    tf_idf_vec()